import org.apache.tools.ant.filters.ReplaceTokens
/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'asemelit' at '05.07.14 11:11' with Gradle 1.12
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.12/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.5'
    providedCompile 'javax:javaee-api:7.0'
    
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile "junit:junit:4.11"
    testCompile "org.glassfish.main.extras:glassfish-embedded-all:3.1.2.2"
    testCompile "mysql:mysql-connector-java:5.1.24"
}

webAppDirName = 'web'

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}

task processWebInfTemplates(type: Copy) {
    from 'src/templates/WEB-INF' 
    
    filesMatching( 'glassfish-resources.xml' ,
        { fileCopyDetails ->
            fileCopyDetails.filter(tokens: [
                    dbHost:dbHost
                    , dbPort:dbPort
                    , dbName:dbName
                    , dbUser:dbUser
                    , dbPassword:dbPassword
                ], ReplaceTokens)
        } as Action
    )
    into 'build/webinf-resources'
}

task processDdlResources(type: Copy) {
    from 'src/templates/ddl' 
    
    filesMatching( 'setup.sql' ,
        { fileCopyDetails ->
            fileCopyDetails.filter(tokens: [
                    dbHost:dbHost
                    , dbPort:dbPort
                    , dbName:dbName
                    , dbUser:dbUser
                    , dbPassword:dbPassword
                ], ReplaceTokens)
        } as Action
    )
    into 'build/ddlResources'
}

processResources {
    from('src/conf') {
        into 'META-INF'
    }
}

processTestResources {
    from war
}

war {
    exclude '**/WEB-INF/glassfish-resources.xml' //so the hard-coded one is ignored
    webInf { 
        from processWebInfTemplates
    }
}

task prepareDB(dependsOn: processDdlResources) << {
    def cmd = "mysql --user=$dbRootUser --password=$dbRootPassword --host=$dbHost --port=$dbPort --force"
    println "Executing $cmd"
    def proc = cmd.execute()
    proc.getOutputStream().withStream {
        it.write(file('build/ddlResources/setup.sql').text.getBytes())
    }
    def dbSetupLogFile = new File('dbSetup.txt')
    def dbSetupLogFileOutput = dbSetupLogFile.newOutputStream()
    proc.consumeProcessOutput(dbSetupLogFileOutput, dbSetupLogFileOutput)
    proc.waitFor()
    dbSetupLogFileOutput.flush()
    dbSetupLogFileOutput.close()
    
    def errorMatcher = dbSetupLogFile.text =~ /ERROR (\d+?) .*/
    while (errorMatcher.find()) {
        switch(errorMatcher.group(1)) {
            case '1007':
                println "Database already exists"
                break
            case '1396':
                println "User probably exists already:\n    ${errorMatcher.group()}"
                break
            default:
                ant.fail('Check dbSetup.txt; unexpected error from the db:\n    ' + errorMatcher.group())
        }
    }
    println "DB is ready"
}

task deploy(dependsOn: war) << {
    def outputFile = file('getOutput.html')
    
    ant.get(username:"${glassfishUsername}"
        , password:"${glassfishPassword}"
        , src:"${glassfishAdminUrl}/__asadmin/deploy?path=${file('build/libs/' + project.name + '.war').getCanonicalPath()}&force=true&name=${project.name}"
        , dest: outputFile
        , verbose: true)
    

    if (outputFile.text.contains('Exit Code : SUCCESS')) {
        println "Deployed successfully"
    }
    else {
        println "Something went wrong; check getOutput.html"
    }
}
